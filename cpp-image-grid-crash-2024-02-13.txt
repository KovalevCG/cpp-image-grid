-----------------------------------------------opencv.cpp


#include "opencv.h"
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>

void OpenCV::displayOpenCVWindow() {


    cv::Mat image = cv::imread("images/bg_image_opencv.png");

    // cv::Mat image = cv::Mat::zeros(480, 640, CV_8UC3);
    cv::putText(image, "Hello from OpenCV", cv::Point(50, 50), cv::FONT_HERSHEY_SIMPLEX, 1, cv::Scalar(0, 255, 255), 2);
    cv::imshow("OpenCV Window", image);
    cv::waitKey(0);
}

------------------------------------------------qtwindow.h

#include "opencv.h"
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>

void OpenCV::displayOpenCVWindow() {


    cv::Mat image = cv::imread("images/bg_image_opencv.png");

    // cv::Mat image = cv::Mat::zeros(480, 640, CV_8UC3);
    cv::putText(image, "Hello from OpenCV", cv::Point(50, 50), cv::FONT_HERSHEY_SIMPLEX, 1, cv::Scalar(0, 255, 255), 2);
    cv::imshow("OpenCV Window", image);
    cv::waitKey(0);
}

-------------------------------------------------------main.cpp

// MAIN PROJECT

#include "qtwindow.h"
#include <QApplication>

// Console Output
// Comment this to remove console
#include <fstream>
#include <Windows.h>
#include <iostream>

int main(int argc, char* argv[]) {

    // Console Output
    // Comment this to remove console

    AllocConsole();

    FILE* stream;
    // Redirect stdout
    stream = freopen("CONOUT$", "w", stdout);
    //if (stream == NULL) {
    //    // Handle error
    //}
    // Redirect stderr
    stream = freopen("CONOUT$", "w", stderr);
    //if (stream == NULL) {
    //    // Handle error
    //}


    //AllocConsole();
    //freopen("CONOUT$", "w", stdout);
    //freopen("CONOUT$", "w", stderr);
    std::cout << "Console output enabled.\n";

    QApplication app(argc, argv);
    QtWindow window;
    window.show();
    return app.exec();
}

-------------------------------------------------------------------qtwindow.cpp
#include "qtwindow.h"
#include "opencv.h"
#include "imagelabel.h"
#include <QRect>
#include <QHBoxLayout>
#include <QVBoxLayout>

QtWindow::QtWindow(QWidget* parent) : QMainWindow(parent) {
    setupUi();
}

void QtWindow::setupUi() {
    // Central Widget
    QWidget* centralWidget = new QWidget(this);
    setCentralWidget(centralWidget);

    // Button
    QPushButton* button = new QPushButton("Open OpenCV Window");
    connect(button, &QPushButton::clicked, this, &QtWindow::onOpenCVButtonClicked);

    // Image Labels
    ImageLabel* ilabel1 = new ImageLabel();
    ImageLabel* ilabel2 = new ImageLabel();

    // Horizontal Layout
    QHBoxLayout* layout_hor = new QHBoxLayout();
    layout_hor->addWidget(ilabel1);
    layout_hor->addWidget(ilabel2);

    // Vertical Layout
    QVBoxLayout* layout_vert = new QVBoxLayout(centralWidget);
    layout_vert->addLayout(layout_hor);
    layout_vert->addWidget(button);

    centralWidget->setLayout(layout_vert);

    // Window adjutments
    this->setWindowTitle("Image Grid");
    this->resize(350, 200);
}

void QtWindow::onOpenCVButtonClicked() {
    OpenCV opencv;
    opencv.displayOpenCVWindow();
}

------------------------------------------------------------------imagelabel.cpp
#include "imagelabel.h"
#include <QDragEnterEvent>
#include <QDropEvent>
#include <QMimeData>
#include <QImage>
#include <QPixmap>

#include <iostream>
using namespace std;
//#include <Windows.h>



ImageLabel::ImageLabel(QWidget* parent) : QLabel(parent) {
    setAcceptDrops(true);
    // setStyleSheet("QLabel { border: 2px dashed gray; background-color: rgba(255, 255, 255, 0.5); }");
    setStyleSheet("QLabel { border: 4px dashed #aaa; background-color: rgba(255, 255, 255, 0.5); }");
    setMinimumSize(100, 100); // Ensure the label is visible
    setScaledContents(false);
    setSizePolicy(QSizePolicy::Ignored, QSizePolicy::Expanding);
    setAlignment(Qt::AlignCenter);
    setText("Drop Image Here");
}

void ImageLabel::dragEnterEvent(QDragEnterEvent* event) {
    // Accept the drag event if it contains image data
    if (event->mimeData()->hasImage()) {
        // I should remove this later
        event->acceptProposedAction();
        std::cout << "hasImage() Drag" << std::endl;

    }
    else if (event->mimeData()->hasUrls()) {
        event->acceptProposedAction();
        std::cout << "hasUrls() Drag" << std::endl;
    }
}

void ImageLabel::dropEvent(QDropEvent* event) {
    const QMimeData* mimeData = event->mimeData();

    if (mimeData->hasImage()) {
        // I should remove this later
        //std::cout << "hasImage() Drop" << std::endl;
        // Direct image data (e.g., from another application)
        auto image = qvariant_cast<QImage>(mimeData->imageData());
        setPixmap(QPixmap::fromImage(image).scaled(size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
        event->acceptProposedAction();
    }
    else if (mimeData->hasUrls()) {
        //std::cout << "hasUrls() Drop" << std::endl;
        // Image file dropped

        auto urls = mimeData->urls();
        if (!urls.isEmpty()) {
            // Assuming only the first URL is relevant
            cout << "urls: " << typeid(urls.first()).name() << endl;
            auto url = urls.first();
            QImage image(url.toLocalFile());
            if (!image.isNull()) {
                setPixmap(QPixmap::fromImage(image).scaled(size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
            }
        }
        event->acceptProposedAction();
    }
}
------------------------------------------------------------------imagelabel.h
#pragma once

#include <QLabel>
#include <QMimeData>

class ImageLabel : public QLabel {

	Q_OBJECT

public:
	explicit ImageLabel(QWidget* parent = nullptr);

protected:
	void dragEnterEvent(QDragEnterEvent* event) override;
	void dropEvent(QDropEvent* event) override;

};

